{"version":3,"sources":["utils/api.js","constants/configs.js","components/RegistrationForm.jsx","index.js"],"names":["registerUser","postData","post","apiPath","data","a","fetch","method","headers","body","JSON","stringify","then","response","json","status","catch","error","success","message","RegistrationForm","initialFormValue","name","email","password","passwordrepeat","initialFormState","isLoading","isError","nameError","emailError","passwordError","passwordrepeatError","useState","captchaVisible","setCaptchaVisible","formState","setFormState","formValues","setFormValues","handleInputChange","e","target","value","nameValidation","test","emailValidation","passwordValidation","repeatpasswordValidation","postRegistrationData","captchaValue","includes","className","htmlFor","type","placeholder","onChange","onBlur","onClick","preventDefault","sitekey","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfa33b4c.chunk.js","sourcesContent":["import { API_BASE_URL } from \"../constants/configs\"\n\nexport function registerUser(postData) {\n    return post('signup', { ...postData })\n}\n\nasync function post(apiPath, data) {\n    return fetch(\n        `${API_BASE_URL}${apiPath}`,\n        {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        }\n    )\n    .then(response =>  response.json().then(data => ({ status: response.status, data })))\n    .catch((error) => ({ success: false, message: error.message }))\n}","export const RECAPTCHA_CLIENT_KEY = '6LeVXdsUAAAAAA0QR6J11z4T0wSq5J4hrTC-n8TT'\nexport const API_BASE_URL = 'http://localhost:8080/api/users/'\n","import React, {useState} from 'react'\nimport ReCAPTCHA from 'react-google-recaptcha'\n\nimport '../css/RegistrationForm.css'\nimport { RECAPTCHA_CLIENT_KEY } from '../constants/configs'\nimport { registerUser } from '../utils/api'\n\nconst RegistrationForm = () => {\n    const initialFormValue = { name: '', email: '', password: '', passwordrepeat: '' }\n    const initialFormState = { \n        isLoading: false,\n        message: '',\n        isError: false,\n        nameError: '',\n        emailError: '',\n        passwordError: '',\n        passwordrepeatError: '',\n    }\n    const [captchaVisible, setCaptchaVisible] = useState(false)\n    const [formState, setFormState] = useState({ ...initialFormState })\n    const [formValues, setFormValues] = useState({ ...initialFormValue })\n\n    const handleInputChange = e => {\n        const {name, value} = e.target\n        setFormValues({ ...formValues, [name]: value })\n    }\n\n    const nameValidation = () => {\n        if ((/^(\\w+\\s?)*\\s*.{3,}/).test(formValues.name)) {\n            setFormState({ ...formState, nameError: '' })\n            return true\n        }\n        setFormState({ ...formState, nameError: 'Please enter a valid name' })\n    }\n    \n    const emailValidation = () => {\n        if ((/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/).test(formValues.email)) {\n            setFormState({ ...formState, emailError: '' })\n            return true\n        }\n        setFormState({ ...formState, emailError: 'Please enter a valid email' })\n    }\n\n    const passwordValidation = () => {\n        if ((/(?=.{8,})/).test(formValues.password)) {\n            setFormState({ ...formState, passwordError: '' })\n            formValues.passwordrepeat && repeatpasswordValidation()\n            return true\n        }\n        setFormState({ ...formState, passwordError: 'Password should be atleast 8 characters long' })\n    }\n\n    const repeatpasswordValidation = () => {\n        if (!formValues.password || formState.passwordError) {\n            return passwordValidation()\n        }\n        if (formValues.password === formValues.passwordrepeat) {\n            setFormState({ ...formState, passwordrepeatError: '' })\n            return true\n        }\n        setFormState({ ...formState, passwordrepeatError: 'Password does not match' })\n    }\n\n    const submitData = (e) => {\n        e.preventDefault()\n        formState.isLoading || postRegistrationData()\n    }\n\n    const postRegistrationData = async (captchaValue) => {\n        if (\n            !(\n                nameValidation() && \n                emailValidation() && \n                passwordValidation() && \n                repeatpasswordValidation()\n            )\n        ) {\n            captchaVisible && captchaVisible(false)\n            return \n        }\n        setFormState({ ...initialFormState,  isLoading: true })\n        captchaVisible && setCaptchaVisible(false)\n        const { name, email, password } = formValues\n        const postData = {\n            name, \n            email, \n            password,\n            captchaValue,\n        }\n        const response = await registerUser(postData)\n        if ([401, 429,].includes(response.status)) {\n            setCaptchaVisible(true)\n        }\n        else if(!response.data.success) {\n            setFormState({ isLoading: false, isError: true, message: response.data.message })\n        }\n        else {\n            setFormValues({ ...initialFormValue })\n            setFormState({ ...initialFormState, message: response.data.message })\n        }\n    }\n\n    return (\n        <form className=\"registration-form\">\n            <div className=\"container\">\n                <h1>Register</h1>\n                <p>Please fill in this form to create an account.</p>\n                <hr/>\n                <label htmlFor=\"name\"><b>Name</b></label>\n                <input \n                    type=\"text\" \n                    placeholder=\"Enter Name\" \n                    name=\"name\" \n                    onChange={handleInputChange}\n                    onBlur={nameValidation}\n                    value={formValues.name}\n                />\n                <p className=\"error\">\n                    { formState.nameError }\n                </p>\n                <label htmlFor=\"email\"><b>Email</b></label>\n                <input \n                    type=\"text\" \n                    placeholder=\"Enter Email\" \n                    name=\"email\" \n                    onChange={handleInputChange}\n                    onBlur={emailValidation}\n                    value={formValues.email}\n                />\n                <p className=\"error\">\n                    { formState.emailError }\n                </p>\n                <label htmlFor=\"password\"><b>Password</b></label>\n                <input \n                    type=\"password\" \n                    placeholder=\"Enter Password\" \n                    name=\"password\" \n                    onChange={handleInputChange}\n                    onBlur={passwordValidation}\n                    value={formValues.password}\n                />\n                <p className=\"error\">\n                    { formState.passwordError }\n                </p>\n                <label htmlFor=\"passwordrepeat\"><b>Repeat Password</b></label>\n                <input \n                    type=\"password\" \n                    placeholder=\"Repeat Password\" \n                    name=\"passwordrepeat\"\n                    onChange={handleInputChange}\n                    onBlur={repeatpasswordValidation}\n                    value={formValues.passwordrepeat}\n                />\n                <p className=\"error\">\n                    { formState.passwordrepeatError }\n                </p>\n                <div className=\"clearfix\">\n                    <button \n                        type=\"submit\" \n                        className=\"signupbtn\" \n                        onClick={submitData}\n                    >\n                        { formState.isLoading ? 'Loading...' : 'Submit' }\n                    </button>\n                </div>\n                <p className={formState.isError ? 'error' : 'success-msg'}>\n                    { formState.message }\n                </p>\n                {\n                    captchaVisible && (\n                        <div className=\"captcha-container\">\n                            <ReCAPTCHA\n                                sitekey={RECAPTCHA_CLIENT_KEY}\n                                onChange={postRegistrationData}\n                            />\n                        </div>\n                    )\n                }\n            </div>\n        </form>\n    )\n}\n\nexport default RegistrationForm\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/index.css'\nimport RegistrationForm from './components/RegistrationForm'\n\nReactDOM.render(<RegistrationForm />, document.getElementById('root'))\n\n"],"sourceRoot":""}